V 13
3
LANG:10000 8 (NoName)
LANG:10001 8 (NoName)
LANG:10027 18 (БезИмени)
PANEL,-1 -1 245 176 N "_3DFace" 2
"$dpe_level"
"$f_reserved_water_percentage"
E E E E E 1 -1 -1 0  130 169
""0  1
E E 3
"CBRef" "0"
"EClose" E
"dpi" "96"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 6 Layer1
LANG:10001 6 Layer1
LANG:10027 6 Layer1
6 0
"water_usable"
""
1 71 141 E E E 1 E 1 E N {0,0,0} E N "ws_water_usable" E E
 E E
1 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
"main()
{
  // the following script scales the rectangle which indicates
  // the water in the reservoir depending on the \"level\" value.
  // You could do almost the same very easily by using the 
  // \"simple paramtrisation\" on the \"OnInitialize\" event in the 
  // property sheet and working with SCALING -> Y-SCALE. 
  
  dyn_errClass err;

  // check if parametrized datapoint element really exists
  if( dpSubStr($dpe_level+\":_online.._value\", DPSUB_DP_EL ) == \"\" )
  {
    setValue(\"\", \"color\", \"_dpdoesnotexist\");
    return;
  }

  // connect to value und value-range of the datapoint element
  // in order to get informed about every change of these values
  // on every change the function \"setLevel\" is executed 
  dpConnect(\"setLevel\",
            $dpe_level+\":_online.._value\",
            $dpe_level+\":_pv_range.._min\",
            $dpe_level+\":_pv_range.._max\");
            
  // if something (whatever) happens and the dpconnect() fails,
  // we can find that out with the 'getLastError()' function
  err = getLastError();
  if (dynlen(err) > 0)
    setValue(\"\", \"color\", \"_dpdoesnotexist\");
}


setLevel(string dp1, float NewValueY, string dp2, float fYMin, string dp3, float fYMax)
{
float Y_MIN_SCALE = 0.01 * 0;
float Y_MAX_SCALE = 0.01 * 100;

float fXScale;
float fYScale;

float  reserve = $f_reserved_water_percentage;
string fillCol;
bool   vis;
  

  if ( 100*(NewValueY - fYMin )/(fYMax - fYMin) < reserve )
  {
    fillCol = \"ws_water\";
    vis = FALSE;
  }
  else
  {
    fillCol = \"ws_water_usable\";
    vis = TRUE;
  }

  // read the current scaling from the shape 
  getValue(\"\", \"scale\", fXScale, fYScale);
  // calculate the new scaling
  fYScale = ( 1.0 * (Y_MAX_SCALE - Y_MIN_SCALE) / (fYMax - fYMin)) * 
            (NewValueY - fYMin) + Y_MIN_SCALE;
  if (fYScale > Y_MAX_SCALE) fYScale = Y_MAX_SCALE;
  else if (fYScale < Y_MIN_SCALE) fYScale = Y_MIN_SCALE;
  // apply the new scale factor to the scale property of the shape
  setMultiValue(\"\", \"scale\", fXScale, fYScale,
  			   \"\", \"backCol\",fillCol,
  			   \"water_static\",\"visible\",vis); 
}" 0
 "main()
{
  float 	range, posX, posY, refX, refY;
  string	textUnit;
  
  getValue(\"\",\"position\", posX, posY,
      		    \"size\", refX, refY);  
      
  // put a small primtive textfield with the value and unit as a
  // new reference element on runtime
  addSymbol(myModuleName(), myPanelName(), \"objects/minitext_active.pnl\", \"textmax\", 
            makeDynString(\"$dpe:\"+$dpe_level),posX+(refX/2.0)-25,posY-refY-18,0,1,1);
  
  //remove the symbol/small display after 2 secs
  delay(2);
  removeSymbol(myModuleName(),myPanelName(),\"textmax\");
}" 0
 0 1 1 0 1 E U  1 E 71 40 191 141
10 2
"reservoir"
""
1 71 30 E E E 1 E 1 E N "STD_border_dark" E N "ws_concrete" E E
 E E
3 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  1 E 8 71 30
61 30
61 150
201 150
201 30
191 30
191 140
71 140
 1
6 4
"water_static"
""
1 71 140 E E E 1 E 1 E N {0,0,0} E N "ws_water" E E
 E E
5 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
"main()
{
  // the following script scales the rectangle which indicates
  // the water in the reservoir depending on the \"level\" value.
  // this script scales the lower area (static_water)
  
  dyn_errClass 	err;
  float 		reserve = $f_reserved_water_percentage;
  
  if(reserve > 100)
    reserve = 100;
  if(reserve < 0)
    reserve = 0;
    
  setValue(\"\",\"scale\",1,5*(reserve/100.0));
}
" 0
 "main()
{
  float 	range, posX, posY, refX, refY;
  string	textUnit;
  
  getValue(\"water_usable\",\"position\", posX, posY,
      		              \"size\", refX, refY);  
    
  // put a small primtive textfield with the value and unit as a
  // new reference element on runtime
  
  addSymbol(myModuleName(), myPanelName(), \"objects/minitext_active.pnl\", \"textmax\", 
            makeDynString(\"$dpe:\"+$dpe_level),posX+(refX/2.0)-25,posY-refY-18,0,1,1);
  
  // remove the symbol/small display after 2 secs
  delay(2);
  removeSymbol(myModuleName(),myPanelName(),\"textmax\");
}" 0
 0 1 1 0 1 E U  1 E 71 120 191 140
4 44
"topLine"
""
1 119 40 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
42 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 1 0 1 E  190 40 72 40
0
LAYER, 1 
3
LANG:10000 6 Layer2
LANG:10001 6 Layer2
LANG:10027 6 Layer2
0
LAYER, 2 
3
LANG:10000 6 Layer3
LANG:10001 6 Layer3
LANG:10027 6 Layer3
0
LAYER, 3 
3
LANG:10000 6 Layer4
LANG:10001 6 Layer4
LANG:10027 6 Layer4
0
LAYER, 4 
3
LANG:10000 6 Layer5
LANG:10001 6 Layer5
LANG:10027 6 Layer5
6 50
"refScaleLine"
""
1 34 56 E E E 1 E 0 E N "STD_device_body" E N "STD_device_body" E E
 E E
47 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  1 E 55 40 59 140
4 51
"Line4"
""
1 71 140 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
48 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 1 0 1 E  71 140 50 140
10 52
"AI1"
""
1 54 141 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
49 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
"main()
{
  bool 		     alerthdlExists, rangeExists;
  int		       ranges, i;
  float		     maxRange, minRange, scaleRefX, scaleRefY, scaleRefPosX, scaleRefPosY,
  			       origX, origY, newX, newY;
  string	     textUnit, sClass;
  dyn_string   alertColor;            
  dyn_float	   u_limit, l_limit;
  dyn_errClass err;

  // first check if the specified dpe really exists and the identifier
  // is valid
  if( dpSubStr($dpe_level+\":_online.._value\", DPSUB_DP_EL ) == \"\" )
  {
    setMultiValue(\"AI1\", \"color\", \"_dpdoesnotexist\");
    return;
  }

  // check if an alert handling and range is parametrized for the dpe
  dpGet($dpe_level+\":_alert_hdl.._type\",alerthdlExists,
        $dpe_level+\":_pv_range.._type\",rangeExists);

  // find out how many alert ranges are specified
  if( dpGet($dpe_level+\":_alert_hdl.._num_ranges\",ranges) != 0 )
  {
    // alert handling or parametrisation error
    setMultiValue(\"HiHi\", \"color\", \"_dpdoesnotexist\");
  }
  else
  {
    // read all alert ranges (defined by upper and lower limit)
    // from the datapoint and find out the alert class for
    // this range - then read the range color from the class
    for (i=1; i <= ranges; i++)
    {
      dpGet($dpe_level+\":_alert_hdl.\"+i+\"._u_limit\",u_limit[i],
            $dpe_level+\":_alert_hdl.\"+i+\"._l_limit\",l_limit[i],
            $dpe_level+\":_alert_hdl.\"+i+\"._class\",sClass);
      if(sClass != \"\")
        dpGet(sClass+\":_alert_class.._color_c_ack\",alertColor[i]);
      else
        alertColor[i] = \"\";
    }
    
    // 'refScaleLine' is a shape with the same 100% hight as the
    //  
    getValue(\"refScaleLine\",\"size\",scaleRefX, scaleRefY,
                            \"position\", scaleRefPosX, scaleRefPosY);
    
    if (rangeExists)
    {
      dpGet($dpe_level+\":_pv_range.._min\",minRange,
            $dpe_level+\":_pv_range.._max\",maxRange);            
      u_limit[i-1] = maxRange;
    } 

    int xx, yy ;  
    getValue(\"Line4\",\"position\",xx,  yy);

    for (i=1; i < dynlen(u_limit) ; i++)
    {
            
      getValue(\"AI\"+i,\"position\",origX,  origY);
  
      // calculate the position of the alert range limit indicator relativly
      // to the scaleble reservoir
      newY = yy - ((u_limit[i]-minRange)*scaleRefY)/(maxRange - minRange);
      newX = origX;
      
      setValue(\"AI\"+i,\"backCol\",alertColor[(i>(ranges/2.0))?(i+1):i],
                      \"position\",newX,newY,
                      \"visible\",TRUE);
    }  
  }
}
" 0
 "main()
{
  // open a small, tool-tipp like display to 
  // to show the indicated limit
  int 		i = 1;  
  float 	limit, posX, posY, refX, refY;
  string	textUnit;
  
  // read the min limit of the range from the datapoint-element
  dpGet($dpe_level+\":_alert_hdl.\"+i+\"._u_limit\",limit);
  getMultiValue(\"\",\"position\", posX, posY,
      			\"refScaleLine\", \"size\", refX, refY);   			
  
  // format the value 'range' with 4.2 float format, a blanc before
  // and after and put the engineering Unit at the end
  sprintf(textUnit,\" %4.2f \"+dpGetUnit($dpe_level), limit);
  
  // put a small primtive textfield with the value and unit as a
  // new reference element on runtime
  addSymbol(myModuleName(), myPanelName(), \"objects/minitext.pnl\", \"textAI\"+i, 
            makeDynString(\"$s_text:\"+textUnit),posX+4*refX,posY-9,0,1,1);
  
  // remove the symbol/small display after 2 secs
  delay(2);
  removeSymbol(myModuleName(),myPanelName(),\"textAI\"+i);
}
" 0
 0 1 1 0 1 E U  1 E 3 52 137
60 141
52 145
 1
10 53
"AI2"
""
1 54 141 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
50 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E "main()
{
  // open a small, tool-tipp like display to 
  // to show the indicated limit
  int 		i = 2;  
  float 	limit, posX, posY, refX, refY;
  string	textUnit;
  
  // read the min limit of the range from the datapoint-element
  dpGet($dpe_level+\":_alert_hdl.\"+i+\"._u_limit\",limit);
  getMultiValue(\"\",\"position\", posX, posY,
      			\"refScaleLine\", \"size\", refX, refY);   			
  
  // format the value 'range' with 4.2 float format, a blanc before
  // and after and put the engineering Unit at the end
  sprintf(textUnit,\" %4.2f \"+dpGetUnit($dpe_level), limit);
  
  // put a small primtive textfield with the value and unit as a
  // new reference element on runtime
  addSymbol(myModuleName(), myPanelName(), \"objects/minitext.pnl\", \"textAI\"+i, 
            makeDynString(\"$s_text:\"+textUnit),posX+4*refX,posY-9,0,1,1);
  
  // remove the symbol/small display after 2 secs
  delay(2);
  removeSymbol(myModuleName(),myPanelName(),\"textAI\"+i);
}
" 0
 0 1 1 0 1 E U  1 E 3 52 137
60 141
52 145
 1
10 54
"AI3"
""
1 54 141 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
51 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E "main()
{
  // open a small, tool-tipp like display to 
  // to show the indicated limit
  int 		i = 3;  
  float 	limit, posX, posY, refX, refY;
  string	textUnit;
  
  // read the min limit of the range from the datapoint-element
  dpGet($dpe_level+\":_alert_hdl.\"+i+\"._u_limit\",limit);
  getMultiValue(\"\",\"position\", posX, posY,
      			\"refScaleLine\", \"size\", refX, refY);   			
  
  // format the value 'range' with 4.2 float format, a blanc before
  // and after and put the engineering Unit at the end
  sprintf(textUnit,\" %4.2f \"+dpGetUnit($dpe_level), limit);
  
  // put a small primtive textfield with the value and unit as a
  // new reference element on runtime
  addSymbol(myModuleName(), myPanelName(), \"objects/minitext.pnl\", \"textAI\"+i, 
            makeDynString(\"$s_text:\"+textUnit),posX+4*refX,posY-9,0,1,1);
  
  // remove the symbol/small display after 2 secs
  delay(2);
  removeSymbol(myModuleName(),myPanelName(),\"textAI\"+i);
}
" 0
 0 1 1 0 1 E U  1 E 3 52 137
60 141
52 145
 1
10 55
"AI4"
""
1 54 141 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
52 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E "main()
{
  // open a small, tool-tipp like display to 
  // to show the indicated limit
  int 		i = 4;  
  float 	limit, posX, posY, refX, refY;
  string	textUnit;
  
  // read the min limit of the range from the datapoint-element
  dpGet($dpe_level+\":_alert_hdl.\"+i+\"._u_limit\",limit);
  getMultiValue(\"\",\"position\", posX, posY,
      			\"refScaleLine\", \"size\", refX, refY);   			
  
  // format the value 'range' with 4.2 float format, a blanc before
  // and after and put the engineering Unit at the end
  sprintf(textUnit,\" %4.2f \"+dpGetUnit($dpe_level), limit);
  
  // put a small primtive textfield with the value and unit as a
  // new reference element on runtime
  addSymbol(myModuleName(), myPanelName(), \"objects/minitext.pnl\", \"textAI\"+i, 
            makeDynString(\"$s_text:\"+textUnit),posX+4*refX,posY-9,0,1,1);
  
  // remove the symbol/small display after 2 secs
  delay(2);
  removeSymbol(myModuleName(),myPanelName(),\"textAI\"+i);
}
" 0
 0 1 1 0 1 E U  1 E 3 52 137
60 141
52 145
 1
4 56
"Line1"
""
1 50 40 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
53 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 2 1 1 0 1 E  71 40 50 40
10 57
"Polyline1"
""
1 55 34 E E E 1 E 1 E N {0,0,0} E N "ws_water_usable" E E
 E E
54 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E "main()
{
  // open a small, tool-tipp like display to 
  // to show 
  
  float 	range, posX, posY, refX, refY;
  string	textUnit;
  
  // read the max limit of the range from the datapoint-element
  dpGet($dpe_level+\":_pv_range.._max\",range);
  getMultiValue(\"\",\"position\", posX, posY,
      			\"refScaleLine\", \"size\", refX, refY);   			
  
  
  // format the value 'range' with 4.2 float format, a blanc before
  // and after and put the engineering Unit at the end
  sprintf(textUnit,\" %4.2f \"+dpGetUnit($dpe_level), range);
  
  // put a small primtive textfield with the value and unit as a
  // new reference element on runtime
  addSymbol(myModuleName(), myPanelName(), \"objects/minitext.pnl\", \"textmax\", 
            makeDynString(\"$s_text:\"+textUnit),posX+3.9*refX,posY-9,0,1,1);
  
  // remove the symbol/small display after 2 secs
  delay(2);
  removeSymbol(myModuleName(),myPanelName(),\"textmax\");
}" 0
 0 1 1 0 1 E U  1 E 3 59 30
55 38
51 30
 1
10 58
"Polyline2"
""
1 55 146 E E E 1 E 1 E N {0,0,0} E N "ws_water_usable" E E
 E E
55 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E "main()
{
  // open a small, tool-tipp like display to 
  // to show the indicated limit
  
  float 	range, posX, posY, refX, refY;
  string	textUnit;
  
  // read the min limit of the range from the datapoint-element
  dpGet($dpe_level+\":_pv_range.._min\",range);
  getMultiValue(\"\",\"position\", posX, posY,
      			\"refScaleLine\", \"size\", refX, refY);   			
  
  // format the value 'range' with 4.2 float format, a blanc before
  // and after and put the engineering Unit at the end
  sprintf(textUnit,\" %4.2f \"+dpGetUnit($dpe_level), range);
  
  // put a small primtive textfield with the value and unit as a
  // new reference element on runtime
  addSymbol(myModuleName(), myPanelName(), \"objects/minitext.pnl\", \"textmin\", 
            makeDynString(\"$s_text:\"+textUnit),posX+3.9*refX,posY-9,0,1,1);
  
  // remove the symbol/small display after 2 secs
  delay(2);
  removeSymbol(myModuleName(),myPanelName(),\"textmin\");
}" 0
 0 1 1 0 1 E U  1 E 3 51 150
55 142
59 150
 1
0
LAYER, 5 
3
LANG:10000 6 Layer6
LANG:10001 6 Layer6
LANG:10027 6 Layer6
0
LAYER, 6 
3
LANG:10000 6 Layer7
LANG:10001 6 Layer7
LANG:10027 6 Layer7
0
LAYER, 7 
3
LANG:10000 6 Layer8
LANG:10001 6 Layer8
LANG:10027 6 Layer8
0
0
